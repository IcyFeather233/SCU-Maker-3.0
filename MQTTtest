#include <WS2812FX.h>

// mqtt + esp8266
#include <EEPROM.h>
#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#include <Wire.h>
#include <Adafruit_INA219.h>

const char* ssid = "SCU_Makers";  // wifi名称
const char* password = "iloveSCU"; // wifi密码
const char* mqtt_server = "scumaker.org";  // mqtt服务器地址，如本地ip192.168.31.22
 
WiFiClient espClient;
PubSubClient client(espClient);
 
const byte ledPin = D4; // 需要控制的led灯
#define LED_COUNT 100
#define TIMER_MS 5000

WS2812FX ws2812fx = WS2812FX(LED_COUNT, ledPin, NEO_RGB + NEO_KHZ800);


unsigned long last_change = 0;
unsigned long now = 0;

void callback(char* topic, byte* payload, unsigned int length) {
 Serial.print("Message arrived [");
 Serial.print(topic);
 Serial.print("] ");

 for (int i=0;i<length;i++) {
  char receivedChar = (char)payload[i];
  Serial.print(receivedChar); // 打印mqtt接收到消息

  if (receivedChar == '1') {  // 收到消息是 '1' 点亮LED灯
//    digitalWrite(ledPin, HIGH);
    ws2812fx.setBrightness(100);
  }
  if (receivedChar == '0')    // 收到消息是 '0' 关闭LED灯
//   digitalWrite(ledPin, LOW);
    ws2812fx.setBrightness(0);
  }
  Serial.println();
}
 
 
void reconnect() {
 while (!client.connected()) {
   Serial.print("Attempting MQTT connection...");
   if (client.connect("ESP8266 Client")) {
    Serial.println("connected");
    client.subscribe("ledStatus");  // 订阅 'ledStatus' 这个topic
   } else {
     Serial.print("failed, rc=");
     Serial.print(client.state());
     Serial.println(" try again in 5 seconds");
     delay(5000);
   }
 }
}
 
void setup()
{
 Serial.begin(9600);
 
 client.setServer(mqtt_server, 1883); // 连接mqtt
 client.setCallback(callback);        // 设置回调，控制led灯
 
// pinMode(ledPin, OUTPUT);

//ws2812
  ws2812fx.init();
  ws2812fx.setBrightness(100);
  ws2812fx.setSpeed(1000);
  ws2812fx.setColor(0x007BFF);
  ws2812fx.setMode(FX_MODE_STATIC);
  ws2812fx.start();
}
 
void loop()
{
 //ws2812
  now = millis();

  ws2812fx.service();

  if(now - last_change > TIMER_MS) {
    ws2812fx.setMode((ws2812fx.getMode() + 1) % ws2812fx.getModeCount());
    last_change = now;
  }

  //mqtt
 if (!client.connected()) {
  reconnect();
 }
 client.loop();
}
